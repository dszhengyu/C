ASSUME CS:CODE, SS:STACK

STACK SEGMENT
	DW 32 DUP(0)
STACK ENDS

CODE SEGMENT
	
	
START:
	MOV AX, STACK
	MOV SS, AX
	MOV SP, 64
	
	MOV AX, CODE
	MOV DS, AX
	MOV SI, OFFSET S
	MOV AX, 0
	MOV ES, AX
	MOV DI, 200H
	MOV CX, OFFSET SEND - OFFSET S
	CLD
	REP MOVSB
	
	MOV WORD PTR ES:[7CH * 4], 200H
	MOV WORD PTR ES:[7CH * 4 + 2], 0

	MOV AH, 1
	MOV AL, 2
	INT 7CH
	
	MOV AX, 4C00H
	INT 21H
	
S:
	JMP SHORT S1
TABLE DW SUB1 - S + 200H, SUB2 - S + 200H, SUB3 - S + 200H, SUB4 - S + 200H
S1:
	CMP AH, 3
	JA DONE
	PUSH AX
	PUSH BX
	MOV BL, AH
	MOV BH, 0
	ADD BX, BX
	CALL WORD PTR CS:[TABLE + BX - S + 200H]
	POP BX
	POP AX
DONE:
	IRET

SUB1:
	PUSH BX
	PUSH CX
	PUSH DS
	MOV BX, 0B800H
	MOV DS, BX
	MOV BX, 0
	MOV CX, 2000	
SUB11:
	MOV BYTE PTR [BX], 20H
	ADD BX, 2
	LOOP SUB11
	POP DS
	POP CX
	POP BX
	RET
	
SUB2:
	PUSH AX
	PUSH BX
	PUSH CX
	PUSH DS
	MOV BX, 0B800H
	MOV DS, BX
	MOV BX, 1
	MOV CX, 2000	
SUB21:
	MOV AH, [BX]
	AND AH, 11111000B
	OR AH, AL
	MOV [BX], AH
	ADD BX, 2
	LOOP SUB21
	POP DS
	POP CX
	POP BX
	POP AX
	RET

SUB3:
	PUSH AX
	PUSH BX
	PUSH CX
	PUSH DS
	MOV CL, 4
	SHL AL, CL
	MOV BX, 0B800H
	MOV DS, BX
	MOV BX, 1
	MOV CX, 2000	
SUB31:
	MOV AH, [BX]
	AND AH, 10001111B
	OR AH, AL
	MOV [BX], AH
	ADD BX, 2
	LOOP SUB31
	POP DS
	POP CX
	POP BX
	POP AX
	RET
	
SUB4:
	PUSH AX
	PUSH CX
	PUSH DS
	PUSH ES
	PUSH SI
	PUSH DI
	MOV AX, 0B800H
	MOV DS, AX
	MOV ES, AX
	MOV SI, 160
	MOV DI, 0
	MOV CX, 24
SUB41:
	PUSH CX
	MOV CX, 160
	CLD
	REP MOVSB
	POP CX
	LOOP SUB41
	MOV SI, 160 * 24
	MOV CX, 80
SUB42:
	MOV BYTE PTR [SI], ' '
	ADD SI, 2
	LOOP SUB42
	
	POP DI
	POP SI
	POP ES
	POP DS
	POP CX
	POP AX
	RET
SEND:
	NOP	
	

	
	
CODE ENDS
END START



